package ca.uwaterloo.ide.example.cp

import ca.uwaterloo.ide.problem.IdeProblem
import com.ibm.wala.dataflow.IFDS.ISupergraph

class ConstantPropagationProblem extends IdeProblem {
  /**
   * Functions for inter-procedural edges from a call node to the corresponding start edges.
   */
  override def callFlowFunction(src: XNode, dest: ConstantPropagationProblem.this.type, ret: ConstantPropagationProblem.this.type): Iterable[FactFunPair] = ???

  /**
   * Functions for intra-procedural edges from a call to the corresponding return edges.
   */
  override def callToReturnFlowFunction(src: XNode, dest: ConstantPropagationProblem.this.type): Iterable[FactFunPair] = ???

  /**
   * the flow function for a call-return edge, when the supergraph does not contain any callees of src
   */
  override def callNoneToReturnFlowFunction(src: XNode, dest: ConstantPropagationProblem.this.type): Iterable[FactFunPair] = ???

  /**
   * Functions for inter-procedural edges from an end node to the return node of the callee function.
   */
  override def returnFlowFunction(callN: ConstantPropagationProblem.this.type, src: XNode, dest: ConstantPropagationProblem.this.type): ReturnFlowFunctionType = ???

  /**
   * Functions for all other (inter-procedural) edges.
   */
  override def normalFlowFunction(src: XNode, dest: ConstantPropagationProblem.this.type): Iterable[FactFunPair] = ???

  /**
   * The main method nodes that should be the entry points for the instance
   */
  override def initialSeeds: Seq[(XEdge, ConstantPropagationProblem.this.type)] = ???

  override type MicroFunction = this.type
  override type LatticeElem = this.type
  override val Bottom: LatticeElem = _
  override val Top: LatticeElem = _
  override val Id: MicroFunction = _
  override val λTop: MicroFunction = _

  /**
   * The supergraph generated by WALA
   */
  override def supergraph: ISupergraph[ConstantPropagationProblem.this.type, ConstantPropagationProblem.this.type] = ???

  override type Node = this.type
  override type Fact = this.type
  override type Procedure = this.type
  override val Λ: Fact = _
}
